name: Bekk reusable Arrangement-svc workflow

on:
  workflow_call: 
    # Legg til descriptions
    inputs:
      ENVIRONMENT:
        required: true
        type: string
      TF_VAR_task_image_tag:
        required: false
        type: string
        default:  ${{ github.sha }}
      TERRAFORM_VAR_FILE:
        required: false
        type: string
        default: "dev.tfvars"
      AWS_REGION:
        required: false
        type: string
        default: "eu-central-1"
      ECR_REPOSITORY:
        required: false
        type: string
        default: "bekk-arrangement-svc"
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      SSH_PRIVATE_KEY:
        required: true
      CONNECTIONSTRINGS__EVENTDB:
        required: true
      SENDGRID__APIKEY:
        required: true

jobs:
  build:
    name: build and terraform
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ inputs.TF_VAR_task_image_tag }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add profile credentials to ~/.aws/credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} --profile deploy
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }} --profile deploy

      - name: Terraform Format
        id: fmt
        run: terraform fmt -recursive -check

      - name: Terraform Init
        id: init
        run: terraform -chdir=terraform init

      - name: Terraform Validate
        id: validate
        run: cd terraform && terraform validate -no-color

      # Bytt ut denne med en apply
      - name: Terraform plan for debug
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform -chdir=terraform plan -var-file=dev.tfvars -no-color
        continue-on-error: true
        env:
          TF_VAR_sendgrid_apikey: ${{ secrets.SENDGRID__APIKEY }}
          TF_VAR_connectionstring_eventdb: ${{ secrets.CONNECTIONSTRINGS__EVENTDB }}
          TF_VAR_task_image: $ECR_REGISTRY/$ECR_REPOSITORY
          TF_VAR_task_image_tag: $TF_VAR_task_image_tag

      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
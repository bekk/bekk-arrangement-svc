name: Bekk reusable Arrangement-svc workflow

on:
  workflow_call: 
    # Legg til descriptions
    inputs:
      ENVIRONMENT:
        required: true
        type: string
      BRANCH:
        required: false
        type: string
        default: "${GITHUB_REF##*/}"
      IMAGE_TAG:
        required: false
        type: string
        default:  ${{ github.sha }}
      AWS_REGION:
        required: false
        type: string
        default: "eu-central-1"
      ECR_REPOSITORY:
        required: false
        type: string
        default: "${GITHUB_REPOSITORY##*/}"
      TERRAFORM_WORKSPACE:
        required: false
        type: string
        default: "${GITHUB_REF##*/}"
      TERRAFORM_VAR_FILE:
        required: false
        type: string
        default: "dev.tfvars"
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      SSH_PRIVATE_KEY:
        required: true
      CONNECTIONSTRINGS__EVENTDB:
        required: true
      SENDGRID__APIKEY:
        required: true

jobs:
  build:
    name: build and terraform
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.ECR_REPOSITORY }}
          IMAGE: "$ECR_REGISTRY/$ECR_REPOSITORY"
        run: |
          docker build -t $IMAGE:${{ inputs.IMAGE_TAG }} .
          docker push $IMAGE:${{ inputs.IMAGE_TAG }}
          echo "::set-output name=image::$IMAGE"

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add profile credentials to ~/.aws/credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} --profile deploy
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }} --profile deploy

      - name: Terraform Format
        working-directory: terraform
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        working-directory: terraform
        id: init
        run: terraform init

      - name: Terraform Validate
        working-directory: terraform
        id: validate
        run: terraform validate -no-color

      - name: Create and change Terraform workspace
        working-directory: terraform
        id: workspace
        run: |
          terraform terraform workspace list | grep $WORKSPACE
          if [[ $? -eq 1 ]]; then \
          terraform workspace new $WORKSPACE; \
          else \
          terraform workspace select $WORKSPACE; \
          fi

      - name: Terraform plan for debug
        working-directory: terraform
        id: plan
        if: github.event_name == 'pull_request'
        run:
          terraform plan -var-file=${{ inputs.TERRAFORM_VAR_FILE }} -no-color \
          -var="sendgrid_apikey=${{ secrets.SENDGRID__APIKEY }}" \
          -var="connectionstring_eventdb=${{ secrets.CONNECTIONSTRINGS__EVENTDB }}" \
          -var="hostname=${{ inputs.WORKSPACE }}" \
          -var="environment=${{ inputs.WORKSPACE }}" \
          -var="task_image=${{ steps.build-image.outputs.image }}" \
          -var="task_image_tag=${{ inputs.IMAGE_TAG }}"
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${ process.env.PLAN }
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
name: Bekk-Deployment

on:
  push:
    branches: [ terraform-managed ]
  pull_request:
    branches: [ terraform-managed ]
    
env:
  AWS_REGION: "eu-central-1"
  ECR_REPOSITORY: "bekk-arrangement-svc"
  IMAGE_TAG: ${{ github.sha }}
  
jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    environment: development
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        
# Om vi ønsker å ikke bruke TF
## Dersom vi går for dette, må vi lage TDene
##      - name: Fill in the new image ID in the Amazon ECS task definition
##        id: task-def
##        uses: aws-actions/amazon-ecs-render-task-definition@v1
##        with:
##          task-definition: ${{ env.ECS_TASK_DEFINITION }}
##          container-name: ${{ env.CONTAINER_NAME }}
##          image: ${{ steps.build-image.outputs.image }}
##
##      - name: Deploy Amazon ECS task definition
##        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
##        with:
##          task-definition: ${{ steps.task-def.outputs.task-definition }}
##          service: ${{ env.ECS_SERVICE }}
##          cluster: ${{ env.ECS_CLUSTER }}
##          wait-for-service-stability: false
#  
#  deploy:
#    name: deploy
#    runs-on: ubuntu-latest
#    environment: development
#
#    defaults:
#      run:
#        shell: bash
#
#    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Terraform Init
        run: terraform -chdir=terraform init

#      - name: Terraform Format
#        run: terraform -chdir=terraform fmt -check
        
      - name: Terraform plan for debug
        run: terraform -chdir=terraform plan -var-file=dev.tfvars
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR Sendgrid__Apikey: ${{ secrets.SENDGRID__APIKEY }}
          TF_VAR ConnectionStrings__EventDb: ${{ secrets.CONNECTIONSTRINGS__EVENTDB }}
          TF_VAR task_image_tag: $IMAGE_TAG


#      - name: Terraform Apply
#        run: terraform apply -auto-approve
#        env:
#          CONNECTIONSTRINGS__EVENTDB: ${{ secrets.CONNECTIONSTRINGS__EVENTDB }}
#          SENDGRID__APIKEY: ${{ secrets.SENDGRID__APIKEY }}

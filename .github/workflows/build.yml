name: Build and push docker image

on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        required: true
        type: string
      AWS_REGION:
        required: false
        type: string
        default: "eu-central-1"
      ECR_REPOSITORY:
        required: false
        type: string
        default: ${{ github.event.repository.name }}
      IMAGE_TAG:
        required: false
        type: string
        default:  ${{ github.sha }}
    outputs:
      image:
        description: "Image name"
        value: ${{ jobs.build.outputs.image }}
      image_tag:
        description: "Image tag"
        value: ${{ inputs.IMAGE_TAG }}

    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}
    outputs:
      image_name: ${{ steps.set-outputs.outputs.image_name }}
      image_tag: ${{ steps.set-outputs.outputs.image_tag }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.AWS_REGION }}
          mask-aws-account-id: no

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        id: login-ecr

      - name: Build, tag, and push image to Amazon ECR
        if: github.event.action != 'closed'
        id: build-image
        env:
          IMAGE: "${{ steps.login-ecr.outputs.registry }}/${{ inputs.ECR_REPOSITORY }}"
        run: |
          docker build -t $IMAGE:${{ inputs.IMAGE_TAG }} .
          docker push $IMAGE:${{ inputs.IMAGE_TAG }}

      - name: Set outputs
        id: set-outputs
        env:
          IMAGE: "${{ steps.login-ecr.outputs.registry }}/${{ inputs.ECR_REPOSITORY }}"
        run: |
          echo "::set-output name=image_name::$IMAGE"
          echo "::set-output name=image_tag::${{ inputs.IMAGE_TAG }}"
